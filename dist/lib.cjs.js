"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),React__default=_interopDefault(React),Observable=_interopDefault(require("zen-observable"));function getCacheKey(e){if(!e.name)throw new Error("The provided operation is missing a name property!");return e.name+JSON.stringify(e.variables)}function createStore(e){const t=new Map(e);return{get:e=>{const r=getCacheKey(e);return t.get(r)||null},set:(e,r)=>{const n=getCacheKey(e);t.set(n,r)},extract:()=>[...t]}}function createClient({link:e,initialState:t,ssrMode:r=!1}){const n=createStore(t),{execute:a}=e;return{execute:a,store:n,ssrMode:r,load:t=>e.executePromise(t).then(e=>{e.data&&n.set(t,e.data)}),createOperation({query:e,variables:t={}}){if("Document"===e.kind)return{name:e.definitions[0].name.value,type:e.definitions[0].operation,kind:e.kind,query:e,variables:t};if("String"===e.kind)return{name:e.name,type:e.type,kind:e.kind,query:e.query,variables:t};throw new TypeError("Unknown Query!")}}}const shallowCompare=(e,t)=>Object.keys(e).length===Object.keys(t).length&&Object.keys(e).every(r=>t.hasOwnProperty(r)&&e[r]===t[r]),ArtemisContext=React.createContext();function ArtemisProvider(e){const{client:t}=e;return React__default.createElement(ArtemisContext.Provider,{value:t},e.children)}function useArtemisClient(){return React.useContext(ArtemisContext)}function dataFetchReducer(e,t){switch(t.type){case"FETCH_INIT":return{...e,loading:t.payload,error:!1};case"FETCH_SUCCESS":return{...e,loading:!1,error:!1,data:t.payload};case"FETCH_FAILURE":return{...e,loading:!1,error:!0};default:throw new Error}}function useQuery(e,t={variables:{}}){t.variables=t.variables||{};const r=useArtemisClient(),[n,a]=React.useState(t.variables),o=React.useRef(null),[i,s]=React.useState(t.variables);shallowCompare(t.variables,i)||(a(t.variables),s(t.variables));const u=React.useMemo(()=>r.createOperation({query:e,variables:n}),[e,n]),c=r.store.get(u),l=!!c,[f,p]=React.useReducer(dataFetchReducer,{data:c,loading:!c,error:!1});return React.useEffect(()=>{const e="function"==typeof o.current;if(!l){p({type:"FETCH_INIT",payload:!e});const t=r.execute(u).subscribe({next:t=>{r.store.set(u,t.data);const n=e?o.current(f.data,{fetchMoreResult:t.data}):t.data;o.current=null,p({type:"FETCH_SUCCESS",payload:n})},error:e=>{p({type:"FETCH_FAILURE"})}});return function(){t.unsubscribe()}}},[r,u,l]),{...f,refetch:a,variables:n,fetchMore:({variables:e,updateQuery:t})=>{a(e),o.current=t}}}function parseQuery(e){const[t,r,n]=e.split(/^\s*(fragment|query|mutation) (\w*)( |\()/g);return{type:r,name:n}}const flatten=([e,...t])=>void 0!==e?Array.isArray(e)?[...flatten(e),...flatten(t)]:[e,...flatten(t)]:[];function gql(e,...t){let r=e[0];for(let t=1;t<e.length;t++)if(null===e[t].match(/^\s+$/))throw new Error("Expected Whitespace!");const{type:n,name:a}=parseQuery(r);if("fragment"===n)return[r,t];const o=new Set(flatten(t));return{type:n,name:a,query:r+" "+Array.from(o).join(" "),kind:"String"}}async function fetchJSON(e,t){return t.headers["Content-Type"]="application/json",(await fetch(e,t)).json()}function queryGQL(e,t){return fetchJSON(e.uri,{method:"POST",...e.fetchOptions,headers:e.headers,body:JSON.stringify({variables:t.variables,query:t.query,operationName:t.name})})}function createExecutor(e){return t=>new Observable(r=>(queryGQL(e,t).then(e=>{r.next(e),r.complete()}),()=>{}))}function executor(e){return{execute:createExecutor(e)}}function graphql(e,t={}){return r=>n=>{const a=useArtemisClient(),o={ssr:!0,variables:{}},i="function"==typeof t.options?{...o,...t.options(n)}:{...o,...t.options||{}};if("mutation"===a.createOperation({query:e}).type)return React__default.createElement(r,{...n,mutate:()=>{}});if(a.ssrMode&&!i.ssr)return null;const{data:s,loading:u,error:c,refetch:l}=useQuery(e,i);return React__default.createElement(r,{...n,data:{loading:u,error:c,refetch:l,...s||{}}})}}function compose(){}function withApollo(e){const t={query:async()=>{throw new Error("Fail!")}};return e=>React__default.createElement({...e,client:t})}function Query({query:e,variables:t,children:r}){return r(useQuery(e,{variables:t}))}exports.ArtemisProvider=ArtemisProvider,exports.Query=Query,exports.compose=compose,exports.createClient=createClient,exports.executor=executor,exports.gql=gql,exports.graphql=graphql,exports.useQuery=useQuery,exports.withApollo=withApollo;
